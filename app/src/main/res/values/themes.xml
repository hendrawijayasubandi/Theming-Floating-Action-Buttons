<resources xmlns:tools="http://schemas.android.com/tools">
    <!-- Base application theme. -->
    <style name="Theme.ThemingFloatingActionButtons" parent="Theme.MaterialComponents.DayNight.DarkActionBar">
        <!-- Primary brand color. -->
        <item name="colorPrimary">@color/purple_500</item>
        <item name="colorPrimaryVariant">@color/purple_700</item>
        <item name="colorOnPrimary">@color/white</item>
        <!-- Secondary brand color. -->
        <item name="colorSecondary">@color/teal_200</item>
        <item name="colorSecondaryVariant">@color/teal_700</item>
        <item name="colorOnSecondary">@color/black</item>
        <!-- Status bar color. -->
        <item name="android:statusBarColor" tools:targetApi="21">?attr/colorPrimaryVariant</item>
        <!-- Customize your theme here. -->

        <!--this attribute is to change the theme of the extended FAB-->
        <item name="extendedFloatingActionButtonStyle">
            @style/Widget.App.ExtendedFloatingActionButton</item>

        <!--this attribute is to change the theme of the normal FAB-->
        <item name="floatingActionButtonStyle">@style/Widget.App.FloatingActionButton</item>

    </style>
    <!--changing the theme of the base application ends here-->

    <!--Now changing theme of extended FAB begins from here-->
    <!--make sure to change the value of the parent as
        Widget.MaterialComponents.ExtendedFloatingActionButton-->
    <!--as we are only changing the theme of the extended FAB-->

    <!--inside Widget.App.ExtendedFloatingActionButton there are two attribute-->
    <!--which are making the change of the theme of the extended FAB-->
    <!--those are materialThemeOverlay and shapeAppearanceOverlay-->
    <style name="Widget.App.ExtendedFloatingActionButton" parent="Widget.MaterialComponents.ExtendedFloatingActionButton">

        <!--the following attribute will changes in the appearance
            of the extended FAB in terms of colors-->
        <item name="materialThemeOverlay">@style/myCustomThemeForExtendedFab</item>

        <!--the following attribute will change in the
            shape appearance of the extended FAB-->
        <item name="shapeAppearanceOverlay">@style/customExtendedFAB</item>

        <!--to make the code look cleaner and readable, the above
            two children are implemented separately-->
    </style>

    <!--this style is the child of the shapeAppearanceOverlay attribute
        which in turn is the child of materialThemeOverlay-->
    <style name="customExtendedFAB">

        <!--for the extended FAB the cornerFamily is given the value as the cut-->
        <item name="cornerFamily">cut</item>
        <!--this attribute will make changes to Top Right according to value-->
        <item name="cornerSizeTopRight">0dp</item>
        <!--this attribute will make changes to Top Left according to value-->
        <item name="cornerSizeTopLeft">0dp</item>
        <!--this attribute will make changes to Bottom Right according to value-->
        <item name="cornerSizeBottomRight">0dp</item>
        <!--this attribute will make changes to Bottom Left according to value-->
        <item name="cornerSizeBottomLeft">0dp</item>

    </style>

    <!--for Normal FAB-->
    <style name="customNormalFAB">

        <!--for the extended FAB the cornerFamily is given the value as the cut-->
        <item name="cornerFamily">cut</item>
        <!--this attribute will make changes to Top Right according to value-->
        <item name="cornerSizeTopRight">0dp</item>
        <!--this attribute will make changes to Top Left according to value-->
        <item name="cornerSizeTopLeft">0dp</item>
        <!--this attribute will make changes to Bottom Right according to value-->
        <item name="cornerSizeBottomRight">0dp</item>
        <!--this attribute will make changes to Bottom Left according to value-->
        <item name="cornerSizeBottomLeft">0dp</item>

    </style>

    <!--Here no need of mentioning the parent-->
    <!--because this is already the child of the
        shapeAppearanceOverlay which in turn is the child-->
    <!--of the Widget.App.ExtendedFloatingActionButton-->
    <style name="myCustomThemeForExtendedFab" parent="">

        <!--this attribute gives makes the change in the background of the FAB-->
        <item name="colorSecondary">@color/teal_200</item>

        <!--this attribute gives makes the change in the text and icon color of the FAB-->
        <item name="colorOnSecondary">@android:color/black</item>

    </style>
    <!--Changing the theme of the extended FAB completes here-->

    <!--Now changing theme of normal FAB begins from here-->
    <!--make sure to change the value of the parent as
        Widget.MaterialComponents.FloatingActionButton-->
    <!--as we are only changing the theme of the normal FAB-->

    <!--inside Widget.App.FloatingActionButton there are two attribute-->
    <!--which are making the change of the theme of the normal FAB-->
    <!--those are materialThemeOverlay and shapeAppearanceOverlay-->
    <style name="Widget.App.FloatingActionButton" parent="Widget.MaterialComponents.FloatingActionButton">

        <!--the following attribute will changes in the appearance of
            the normal FAB in terms of colors-->
        <item name="materialThemeOverlay">@style/myCustomThemeForNormalFab</item>

        <!--the following attribute will change in the shape appearance of the normal FAB-->
        <item name="shapeAppearanceOverlay">@style/customNormalFAB</item>

        <!--to make the code look cleaner and readable, the above
            two children are implemented separately-->
    </style>

    <style name="myCustomThemeForNormalFab" parent="">

        <!--for the extended FAB the cornerFamily is given the value as the cut-->

        <!--this attribute gives makes the change in the text and icon color of the FAB-->
        <item name="colorOnSecondary">@android:color/black</item>

    </style>
    <!--Changing the theme of the normal FAB completes here-->

</resources>